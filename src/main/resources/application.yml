server:
  port: 8888

spring:
  application:
    name: "configserver"
  profiles:
    active: git
  cloud:
    config:
      server:
        git:
          uri: "https://github.com/ArthurCorbellini/sbdb-private.git"
          username: the_username
          password: the_access_token
          default-label: main
          timeout: 5 
          clone-on-start: true
          force-pull: true
          search-paths:
          - "/cfg"
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

# Whenever the Github repo send a webhook request to the monitor API, the configserver is going to use the Spring Cloud Bus;
#  -> Behind the scenes, it is going to invoke the bus refresh API path "/actuator/busrefresh" and reload the env variable;
#  -> Also need to create a Webhook in the private Github repo, and the webhook will send a request to the monitor API endpoint;
#     -> This only works in production scenarios, with a available domain;
#     -> Or using tools like Hookdeck, to redirect the request to the localhost.
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health: # libera os endpoints para readness e liveness que serão usados para verificar se o configserver está operante (...8888/actuator/health)
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true